{"ast":null,"code":"module.exports = function (_) {\n  // Setup for variadic operators\n  // ----------------------------\n  // Turn a binary math operator into a variadic operator\n  function variadicMath(operator) {\n    return function () {\n      return _.reduce(arguments, operator);\n    };\n  } // Turn a binary comparator into a variadic comparator\n\n\n  function variadicComparator(comparator) {\n    return function () {\n      var result;\n\n      for (var i = 0; i < arguments.length - 1; i++) {\n        result = comparator(arguments[i], arguments[i + 1]);\n        if (result === false) return result;\n      }\n\n      return result;\n    };\n  } // Turn a boolean-returning function into one with the opposite meaning\n\n\n  function invert(fn) {\n    return function () {\n      return !fn.apply(this, arguments);\n    };\n  } // Basic math operators\n\n\n  function add(x, y) {\n    return x + y;\n  }\n\n  function sub(x, y) {\n    return x - y;\n  }\n\n  function mul(x, y) {\n    return x * y;\n  }\n\n  function div(x, y) {\n    return x / y;\n  }\n\n  function mod(x, y) {\n    return x % y;\n  }\n\n  function inc(x) {\n    return ++x;\n  }\n\n  function dec(x) {\n    return --x;\n  }\n\n  function neg(x) {\n    return -x;\n  } // Bitwise operators\n\n\n  function bitwiseAnd(x, y) {\n    return x & y;\n  }\n\n  function bitwiseOr(x, y) {\n    return x | y;\n  }\n\n  function bitwiseXor(x, y) {\n    return x ^ y;\n  }\n\n  function bitwiseLeft(x, y) {\n    return x << y;\n  }\n\n  function bitwiseRight(x, y) {\n    return x >> y;\n  }\n\n  function bitwiseZ(x, y) {\n    return x >>> y;\n  }\n\n  function bitwiseNot(x) {\n    return ~x;\n  } // Basic comparators\n\n\n  function eq(x, y) {\n    return x == y;\n  }\n\n  function seq(x, y) {\n    return x === y;\n  } // Not\n\n\n  function not(x) {\n    return !x;\n  } // Relative comparators\n\n\n  function gt(x, y) {\n    return x > y;\n  }\n\n  function lt(x, y) {\n    return x < y;\n  }\n\n  function gte(x, y) {\n    return x >= y;\n  }\n\n  function lte(x, y) {\n    return x <= y;\n  } // Mixing in the operator functions\n  // -----------------------------\n\n\n  _.mixin({\n    addContrib: variadicMath(add),\n    sub: variadicMath(sub),\n    mul: variadicMath(mul),\n    div: variadicMath(div),\n    mod: mod,\n    inc: inc,\n    dec: dec,\n    neg: neg,\n    eqContrib: variadicComparator(eq),\n    seq: variadicComparator(seq),\n    neq: invert(variadicComparator(eq)),\n    sneq: invert(variadicComparator(seq)),\n    not: not,\n    gtContrib: variadicComparator(gt),\n    ltContrib: variadicComparator(lt),\n    gteContrib: variadicComparator(gte),\n    lteContrib: variadicComparator(lte),\n    bitwiseAnd: variadicMath(bitwiseAnd),\n    bitwiseOr: variadicMath(bitwiseOr),\n    bitwiseXor: variadicMath(bitwiseXor),\n    bitwiseNot: bitwiseNot,\n    bitwiseLeft: variadicMath(bitwiseLeft),\n    bitwiseRight: variadicMath(bitwiseRight),\n    bitwiseZ: variadicMath(bitwiseZ)\n  });\n};","map":null,"metadata":{},"sourceType":"script"}