{"ast":null,"code":"var _jsxFileName = \"/home/browsewire/Desktop/hj/CEI/cei/client/src/views/app/inventory/Products/CsvModelContent.js\";\nimport React, { useState } from 'react';\nimport CustomInput from 'reactstrap/lib/CustomInput';\nimport * as XLSX from 'xlsx';\n\nfunction CsvModalContent(_ref) {\n  var setData = _ref.setData,\n      importing = _ref.importing,\n      setProcessingFile = _ref.setProcessingFile;\n\n  // process CSV data\n  var processData = function processData(dataString) {\n    var dataStringLines = dataString.split(/\\r\\n|\\n/);\n    var headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n    var list = [];\n\n    for (var i = 1; i < dataStringLines.length; i++) {\n      var row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n      if (headers && row.length == headers.length) {\n        var obj = {};\n\n        for (var j = 0; j < headers.length; j++) {\n          var d = row[j];\n\n          if (d.length > 0) {\n            if (d[0] == '\"') d = d.substring(1, d.length - 1);\n            if (d[d.length - 1] == '\"') d = d.substring(d.length - 2, 1);\n          }\n\n          if (headers[j]) {\n            obj[headers[j]] = d;\n          }\n        } // remove the blank rows\n\n\n        if (Object.values(obj).filter(function (x) {\n          return x;\n        }).length > 0) {\n          list.push(obj);\n        }\n      }\n    } // prepare columns list from headers\n\n\n    var columns = headers.map(function (c) {\n      return {\n        name: c,\n        selector: c\n      };\n    });\n    setData(list);\n    setProcessingFile(false);\n  }; // handle file upload\n\n\n  var handleChange = function handleChange(e) {\n    var file = e.target.files[0];\n    setProcessingFile(true);\n    var reader = new FileReader();\n\n    reader.onload = function (evt) {\n      /* Parse data */\n      var bstr = evt.target.result;\n      var wb = XLSX.read(bstr, {\n        type: 'binary'\n      });\n      /* Get first worksheet */\n\n      var wsname = wb.SheetNames[0];\n      var ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n\n      var data = XLSX.utils.sheet_to_csv(ws, {\n        header: 1\n      });\n      processData(data);\n    };\n\n    reader.readAsBinaryString(file);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CustomInput, {\n    type: \"file\",\n    accept: \".csv,.xlsx\",\n    onChange: handleChange,\n    id: \"exampleCustomFileBrowser3\",\n    name: \"customFile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }), importing && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-center mt-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, \"Importing Data !!!\"), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, \"Please Wait...\")));\n}\n\nexport default CsvModalContent;","map":{"version":3,"sources":["/home/browsewire/Desktop/hj/CEI/cei/client/src/views/app/inventory/Products/CsvModelContent.js"],"names":["React","useState","CustomInput","XLSX","CsvModalContent","setData","importing","setProcessingFile","processData","dataString","dataStringLines","split","headers","list","i","length","row","obj","j","d","substring","Object","values","filter","x","push","columns","map","c","name","selector","handleChange","e","file","target","files","reader","FileReader","onload","evt","bstr","result","wb","read","type","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_csv","header","readAsBinaryString"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport CustomInput from 'reactstrap/lib/CustomInput';\nimport * as XLSX from 'xlsx';\n\nfunction CsvModalContent({setData, importing, setProcessingFile}) {\n\n  // process CSV data\n  const processData = dataString => {\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\n    const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n    const list = [];\n    for (let i = 1; i < dataStringLines.length; i++) {\n      const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n      if (headers && row.length == headers.length) {\n        const obj = {};\n        for (let j = 0; j < headers.length; j++) {\n          let d = row[j];\n          if (d.length > 0) {\n            if (d[0] == '\"')\n              d = d.substring(1, d.length - 1);\n            if (d[d.length - 1] == '\"')\n              d = d.substring(d.length - 2, 1);\n          }\n          if (headers[j]) {\n            obj[headers[j]] = d;\n          }\n        }\n\n        // remove the blank rows\n        if (Object.values(obj).filter(x => x).length > 0) {\n          list.push(obj);\n        }\n      }\n    }\n\n    // prepare columns list from headers\n    const columns = headers.map(c => ({\n      name: c,\n      selector: c,\n    }));\n    setData(list);\n    setProcessingFile(false);\n  }\n\n  // handle file upload\n  const handleChange = e => {\n    const file = e.target.files[0];\n    setProcessingFile(true);\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n      /* Parse data */\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, { type: 'binary' });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n      processData(data);\n    };\n    reader.readAsBinaryString(file);\n  }\n\n  return (\n    \n    <div>\n      <CustomInput\n        type=\"file\"\n        accept=\".csv,.xlsx\"\n        onChange={handleChange}\n        id=\"exampleCustomFileBrowser3\"\n        name=\"customFile\"\n    />\n    {importing && \n      <div className='text-center mt-3'>\n          <h3>Importing Data !!!</h3>\n          <h4>Please Wait...</h4>\n      </div>\n    }\n    </div>\n  );\n}\n\nexport default CsvModalContent;\n"]},"metadata":{},"sourceType":"module"}