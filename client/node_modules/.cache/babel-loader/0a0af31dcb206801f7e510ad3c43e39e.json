{"ast":null,"code":"module.exports = function (_) {\n  // Helpers\n  // -------\n  function enforcesUnary(fn) {\n    return function mustBeUnary() {\n      if (arguments.length === 1) {\n        return fn.apply(this, arguments);\n      } else throw new RangeError('Only a single argument may be accepted.');\n    };\n  } // Curry\n  // -------\n\n\n  var curry = function () {\n    function collectArgs(func, that, argCount, args, newArg, reverse) {\n      if (reverse === true) {\n        args.unshift(newArg);\n      } else {\n        args.push(newArg);\n      }\n\n      if (args.length == argCount) {\n        return func.apply(that, args);\n      } else {\n        return enforcesUnary(function () {\n          return collectArgs(func, that, argCount, args.slice(0), arguments[0], reverse);\n        });\n      }\n    }\n\n    return function curry(func, reverse) {\n      var that = this;\n      return enforcesUnary(function () {\n        return collectArgs(func, that, func.length, [], arguments[0], reverse);\n      });\n    };\n  }(); // Enforce Arity\n  // --------------------\n\n\n  var enforce = function () {\n    var CACHE = [];\n    return function enforce(func) {\n      if (typeof func !== 'function') {\n        throw new Error('Argument 1 must be a function.');\n      }\n\n      var funcLength = func.length;\n\n      if (CACHE[funcLength] === undefined) {\n        CACHE[funcLength] = function (enforceFunc) {\n          return function () {\n            if (arguments.length !== funcLength) {\n              throw new RangeError(funcLength + ' arguments must be applied.');\n            }\n\n            return enforceFunc.apply(this, arguments);\n          };\n        };\n      }\n\n      return CACHE[funcLength](func);\n    };\n  }(); // Right curry variants\n  // ---------------------\n\n\n  var curryRight = function curryRight(func) {\n    return curry.call(this, func, true);\n  };\n\n  var curryRight2 = function curryRight2(fun) {\n    return enforcesUnary(function (last) {\n      return enforcesUnary(function (first) {\n        return fun.call(this, first, last);\n      });\n    });\n  };\n\n  var curryRight3 = function curryRight3(fun) {\n    return enforcesUnary(function (last) {\n      return enforcesUnary(function (second) {\n        return enforcesUnary(function (first) {\n          return fun.call(this, first, second, last);\n        });\n      });\n    });\n  }; // Mixing in the arity functions\n  // -----------------------------\n\n\n  _.mixin({\n    // ### Fixed arguments\n    // Fixes the arguments to a function based on the parameter template defined by\n    // the presence of values and the `_` placeholder.\n    fix: function fix(fun) {\n      var fixArgs = _.tail(arguments);\n\n      var f = function f() {\n        var args = fixArgs.slice();\n        var arg = 0;\n\n        for (var i = 0; i < (args.length || arg < arguments.length); i++) {\n          if (args[i] === _) {\n            args[i] = arguments[arg++];\n          }\n        }\n\n        return fun.apply(null, args);\n      };\n\n      f._original = fun;\n      return f;\n    },\n    unary: function unary(fun) {\n      return function unary(a) {\n        return fun.call(this, a);\n      };\n    },\n    binary: function binary(fun) {\n      return function binary(a, b) {\n        return fun.call(this, a, b);\n      };\n    },\n    ternary: function ternary(fun) {\n      return function ternary(a, b, c) {\n        return fun.call(this, a, b, c);\n      };\n    },\n    quaternary: function quaternary(fun) {\n      return function quaternary(a, b, c, d) {\n        return fun.call(this, a, b, c, d);\n      };\n    },\n    rCurry: curryRight,\n    // alias for backwards compatibility\n    curry2: function curry2(fun) {\n      return enforcesUnary(function curried(first) {\n        return enforcesUnary(function (last) {\n          return fun.call(this, first, last);\n        });\n      });\n    },\n    curry3: function curry3(fun) {\n      return enforcesUnary(function (first) {\n        return enforcesUnary(function (second) {\n          return enforcesUnary(function (last) {\n            return fun.call(this, first, second, last);\n          });\n        });\n      });\n    },\n    // reverse currying for functions taking two arguments.\n    curryRight2: curryRight2,\n    rcurry2: curryRight2,\n    // alias for backwards compatibility\n    curryRight3: curryRight3,\n    rcurry3: curryRight3,\n    // alias for backwards compatibility\n    // Dynamic decorator to enforce function arity and defeat varargs.\n    enforce: enforce,\n    arity: function () {\n      // Allow 'new Function', as that is currently the only reliable way\n      // to manipulate function.length\n\n      /* jshint -W054 */\n      var FUNCTIONS = {};\n      return function arity(numberOfArgs, fun) {\n        if (FUNCTIONS[numberOfArgs] == null) {\n          var parameters = new Array(numberOfArgs);\n\n          for (var i = 0; i < numberOfArgs; ++i) {\n            parameters[i] = \"__\" + i;\n          }\n\n          var pstr = parameters.join();\n          var code = \"return function (\" + pstr + \") { return fun.apply(this, arguments); };\";\n          FUNCTIONS[numberOfArgs] = new Function(['fun'], code);\n        }\n\n        if (fun == null) {\n          return function (fun) {\n            return arity(numberOfArgs, fun);\n          };\n        } else return FUNCTIONS[numberOfArgs](fun);\n      };\n    }()\n  });\n};","map":null,"metadata":{},"sourceType":"script"}