{"ast":null,"code":"import { ThemeColors } from '../../helpers/ThemeColors';\nexport var chartTooltip = {\n  backgroundColor: ThemeColors().foregroundColor,\n  titleFontColor: ThemeColors().primaryColor,\n  borderColor: ThemeColors().separatorColor,\n  borderWidth: 0.5,\n  bodyFontColor: ThemeColors().primaryColor,\n  bodySpacing: 10,\n  xPadding: 15,\n  yPadding: 15,\n  cornerRadius: 0.15\n};\nexport var centerTextPlugin = {\n  afterDatasetsUpdate: function afterDatasetsUpdate(chart) {},\n  beforeDraw: function beforeDraw(chart) {\n    var width = chart.chartArea.right;\n    var height = chart.chartArea.bottom;\n    var ctx = chart.chart.ctx;\n    ctx.restore();\n    var activeLabel = chart.data.labels[0];\n    var activeValue = chart.data.datasets[0].data[0];\n    var dataset = chart.data.datasets[0];\n\n    var meta = dataset._meta[Object.keys(dataset._meta)[0]];\n\n    var _meta = meta,\n        total = _meta.total;\n    var activePercentage = parseFloat((activeValue / total * 100).toFixed(1));\n    activePercentage = chart.legend.legendItems[0].hidden ? 0 : activePercentage;\n\n    if (chart.pointAvailable) {\n      activeLabel = chart.data.labels[chart.pointIndex];\n      activeValue = chart.data.datasets[chart.pointDataIndex].data[chart.pointIndex];\n      dataset = chart.data.datasets[chart.pointDataIndex];\n      meta = dataset._meta[Object.keys(dataset._meta)[0]];\n      total = meta.total;\n      activePercentage = parseFloat((activeValue / total * 100).toFixed(1));\n      activePercentage = chart.legend.legendItems[chart.pointIndex].hidden ? 0 : activePercentage;\n    }\n\n    ctx.font = '36px Nunito, sans-serif';\n    ctx.fillStyle = ThemeColors().primaryColor;\n    ctx.textBaseline = 'middle';\n    var text = \"\".concat(activePercentage, \"%\");\n    var textX = Math.round((width - ctx.measureText(text).width) / 2);\n    var textY = height / 2;\n    ctx.fillText(text, textX, textY);\n    ctx.font = '14px Nunito, sans-serif';\n    ctx.textBaseline = 'middle';\n    var text2 = activeLabel;\n    var textX2 = Math.round((width - ctx.measureText(text2).width) / 2);\n    var textY2 = height / 2 - 30;\n    ctx.fillText(text2, textX2, textY2);\n    ctx.save();\n  },\n  beforeEvent: function beforeEvent(chart, event, options) {\n    var firstPoint = chart.getElementAtEvent(event)[0];\n\n    if (firstPoint) {\n      chart.pointIndex = firstPoint._index;\n      chart.pointDataIndex = firstPoint._datasetIndex;\n      chart.pointAvailable = true;\n    }\n  }\n};","map":{"version":3,"sources":["/home/browsewire/Desktop/hj/CEI/cei/client/src/components/charts/util.js"],"names":["ThemeColors","chartTooltip","backgroundColor","foregroundColor","titleFontColor","primaryColor","borderColor","separatorColor","borderWidth","bodyFontColor","bodySpacing","xPadding","yPadding","cornerRadius","centerTextPlugin","afterDatasetsUpdate","chart","beforeDraw","width","chartArea","right","height","bottom","ctx","restore","activeLabel","data","labels","activeValue","datasets","dataset","meta","_meta","Object","keys","total","activePercentage","parseFloat","toFixed","legend","legendItems","hidden","pointAvailable","pointIndex","pointDataIndex","font","fillStyle","textBaseline","text","textX","Math","round","measureText","textY","fillText","text2","textX2","textY2","save","beforeEvent","event","options","firstPoint","getElementAtEvent","_index","_datasetIndex"],"mappings":"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","sourcesContent":["import { ThemeColors } from '../../helpers/ThemeColors';\n\nexport const chartTooltip = {\n  backgroundColor: ThemeColors().foregroundColor,\n  titleFontColor: ThemeColors().primaryColor,\n  borderColor: ThemeColors().separatorColor,\n  borderWidth: 0.5,\n  bodyFontColor: ThemeColors().primaryColor,\n  bodySpacing: 10,\n  xPadding: 15,\n  yPadding: 15,\n  cornerRadius: 0.15,\n};\n\nexport const centerTextPlugin = {\n  afterDatasetsUpdate(chart) {},\n  beforeDraw(chart) {\n    const width = chart.chartArea.right;\n    const height = chart.chartArea.bottom;\n    const { ctx } = chart.chart;\n    ctx.restore();\n\n    let activeLabel = chart.data.labels[0];\n    let activeValue = chart.data.datasets[0].data[0];\n    let dataset = chart.data.datasets[0];\n    let meta = dataset._meta[Object.keys(dataset._meta)[0]];\n    let { total } = meta;\n\n    let activePercentage = parseFloat(((activeValue / total) * 100).toFixed(1));\n    activePercentage = chart.legend.legendItems[0].hidden\n      ? 0\n      : activePercentage;\n\n    if (chart.pointAvailable) {\n      activeLabel = chart.data.labels[chart.pointIndex];\n      activeValue =\n        chart.data.datasets[chart.pointDataIndex].data[chart.pointIndex];\n\n      dataset = chart.data.datasets[chart.pointDataIndex];\n      meta = dataset._meta[Object.keys(dataset._meta)[0]];\n      total = meta.total;\n      activePercentage = parseFloat(((activeValue / total) * 100).toFixed(1));\n      activePercentage = chart.legend.legendItems[chart.pointIndex].hidden\n        ? 0\n        : activePercentage;\n    }\n\n    ctx.font = '36px Nunito, sans-serif';\n    ctx.fillStyle = ThemeColors().primaryColor;\n    ctx.textBaseline = 'middle';\n\n    const text = `${activePercentage}%`;\n    const textX = Math.round((width - ctx.measureText(text).width) / 2);\n    const textY = height / 2;\n    ctx.fillText(text, textX, textY);\n\n    ctx.font = '14px Nunito, sans-serif';\n    ctx.textBaseline = 'middle';\n\n    const text2 = activeLabel;\n    const textX2 = Math.round((width - ctx.measureText(text2).width) / 2);\n    const textY2 = height / 2 - 30;\n    ctx.fillText(text2, textX2, textY2);\n\n    ctx.save();\n  },\n  beforeEvent(chart, event, options) {\n    const firstPoint = chart.getElementAtEvent(event)[0];\n\n    if (firstPoint) {\n      chart.pointIndex = firstPoint._index;\n      chart.pointDataIndex = firstPoint._datasetIndex;\n      chart.pointAvailable = true;\n    }\n  },\n};\n"]},"metadata":{},"sourceType":"module"}