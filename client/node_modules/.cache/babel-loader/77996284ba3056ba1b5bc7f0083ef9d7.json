{"ast":null,"code":"module.exports = function (_) {\n  // Mixing in the predicate functions\n  // ---------------------------------\n  _.mixin({\n    // A wrapper around instanceof\n    isInstanceOf: function isInstanceOf(x, t) {\n      return x instanceof t;\n    },\n    // An associative object is one where its elements are\n    // accessed via a key or index. (i.e. array and object)\n    isAssociative: function isAssociative(x) {\n      return _.isArray(x) || _.isObject(x) || _.isArguments(x);\n    },\n    // An indexed object is anything that allows numerical index for\n    // accessing its elements (e.g. arrays and strings). NOTE: lodash\n    // does not support cross-browser consistent use of strings as array-like\n    // objects, so be wary in IE 8 when using  String objects and IE<8.\n    // on string literals & objects.\n    isIndexed: function isIndexed(x) {\n      return _.isArray(x) || _.isString(x) || _.isArguments(x);\n    },\n    // A seq is something considered a sequential composite type (i.e. arrays and `arguments`).\n    isSequential: function isSequential(x) {\n      return _.isArray(x) || _.isArguments(x);\n    },\n    // These do what you think that they do\n    isZero: function isZero(x) {\n      return 0 === x;\n    },\n    isEven: function isEven(x) {\n      return _.isFinite(x) && (x & 1) === 0;\n    },\n    isOdd: function isOdd(x) {\n      return _.isFinite(x) && !_.isEven(x);\n    },\n    isPositive: function isPositive(x) {\n      return x > 0;\n    },\n    isNegative: function isNegative(x) {\n      return x < 0;\n    },\n    isValidDate: function isValidDate(x) {\n      return _.isDate(x) && !_.isNaN(x.getTime());\n    },\n    // A numeric is a variable that contains a numeric value, regardless its type\n    // It can be a String containing a numeric value, exponential notation, or a Number object\n    // See here for more discussion: http://stackoverflow.com/questions/18082/validate-numbers-in-javascript-isnumeric/1830844#1830844\n    isNumeric: function isNumeric(n) {\n      return !isNaN(parseFloat(n)) && isFinite(n);\n    },\n    // An integer contains an optional minus sign to begin and only the digits 0-9\n    // Objects that can be parsed that way are also considered ints, e.g. \"123\"\n    // Floats that are mathematically equal to integers are considered integers, e.g. 1.0\n    // See here for more discussion: http://stackoverflow.com/questions/1019515/javascript-test-for-an-integer\n    isInteger: function isInteger(i) {\n      return _.isNumeric(i) && i % 1 === 0;\n    },\n    // A float is a numbr that is not an integer.\n    isFloat: function isFloat(n) {\n      return _.isNumeric(n) && !_.isInteger(n);\n    },\n    // checks if a string is a valid JSON\n    isJSON: function isJSON(str) {\n      try {\n        JSON.parse(str);\n      } catch (e) {\n        return false;\n      }\n\n      return true;\n    },\n    // Returns true if its arguments are monotonically\n    // increaing values; false otherwise.\n    isIncreasing: function isIncreasing() {\n      var count = _.size(arguments);\n\n      if (count === 1) return true;\n      if (count === 2) return arguments[0] < arguments[1];\n\n      for (var i = 1; i < count; i++) {\n        if (arguments[i - 1] >= arguments[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    // Returns true if its arguments are monotonically\n    // decreaing values; false otherwise.\n    isDecreasing: function isDecreasing() {\n      var count = _.size(arguments);\n\n      if (count === 1) return true;\n      if (count === 2) return arguments[0] > arguments[1];\n\n      for (var i = 1; i < count; i++) {\n        if (arguments[i - 1] <= arguments[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}