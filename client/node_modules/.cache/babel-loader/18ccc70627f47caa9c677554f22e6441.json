{"ast":null,"code":"import _slicedToArray from \"/home/browsewire/Desktop/hj/CEI/cei/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/browsewire/Desktop/hj/CEI/cei/client/src/components/charts/Doughnut.js\";\n\n/* eslint-disable prefer-rest-params */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Chart } from 'chart.js';\nimport { centerTextPlugin } from './util';\nimport { doughnutChartOptions } from './config';\n\nvar Doughnut = function Doughnut(_ref) {\n  var data = _ref.data,\n      _ref$shadow = _ref.shadow,\n      shadow = _ref$shadow === void 0 ? false : _ref$shadow;\n  var chartContainer = useRef(null);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      setChartInstance = _useState2[1];\n\n  useEffect(function () {\n    if (chartContainer && chartContainer.current) {\n      if (shadow) {\n        Chart.defaults.doughnutWithShadow = Chart.defaults.doughnut;\n        Chart.controllers.doughnutWithShadow = Chart.controllers.doughnut.extend({\n          draw: function draw(ease) {\n            Chart.controllers.doughnut.prototype.draw.call(this, ease);\n            var ctx = this.chart.ctx;\n            ctx.save();\n            ctx.shadowColor = 'rgba(0,0,0,0.15)';\n            ctx.shadowBlur = 10;\n            ctx.shadowOffsetX = 0;\n            ctx.shadowOffsetY = 10;\n            ctx.responsive = true;\n            Chart.controllers.doughnut.prototype.draw.apply(this, arguments);\n            ctx.restore();\n          }\n        });\n      }\n\n      var context = chartContainer.current.getContext('2d');\n      var newChartInstance = new Chart(context, {\n        type: shadow ? 'doughnutWithShadow' : 'doughnut',\n        options: doughnutChartOptions,\n        plugins: [centerTextPlugin],\n        data: data\n      });\n      setChartInstance(newChartInstance);\n    }\n  }, [chartContainer, data, shadow]);\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default Doughnut;","map":{"version":3,"sources":["/home/browsewire/Desktop/hj/CEI/cei/client/src/components/charts/Doughnut.js"],"names":["React","useEffect","useRef","useState","Chart","centerTextPlugin","doughnutChartOptions","Doughnut","data","shadow","chartContainer","setChartInstance","current","defaults","doughnutWithShadow","doughnut","controllers","extend","draw","ease","prototype","call","ctx","chart","save","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","responsive","apply","arguments","restore","context","getContext","newChartInstance","type","options","plugins"],"mappings":";;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,KAAT,QAAsB,UAAtB;AAEA,SAASC,gBAAT,QAAiC,QAAjC;AACA,SAASC,oBAAT,QAAqC,UAArC;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAA8B;AAAA,MAA3BC,IAA2B,QAA3BA,IAA2B;AAAA,yBAArBC,MAAqB;AAAA,MAArBA,MAAqB,4BAAZ,KAAY;AAC7C,MAAMC,cAAc,GAAGR,MAAM,CAAC,IAAD,CAA7B;;AAD6C,kBAEhBC,QAAQ,CAAC,IAAD,CAFQ;AAAA;AAAA,MAEpCQ,gBAFoC;;AAI7CV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIS,cAAc,IAAIA,cAAc,CAACE,OAArC,EAA8C;AAC5C,UAAIH,MAAJ,EAAY;AACVL,QAAAA,KAAK,CAACS,QAAN,CAAeC,kBAAf,GAAoCV,KAAK,CAACS,QAAN,CAAeE,QAAnD;AACAX,QAAAA,KAAK,CAACY,WAAN,CAAkBF,kBAAlB,GAAuCV,KAAK,CAACY,WAAN,CAAkBD,QAAlB,CAA2BE,MAA3B,CACrC;AACEC,UAAAA,IADF,gBACOC,IADP,EACa;AACTf,YAAAA,KAAK,CAACY,WAAN,CAAkBD,QAAlB,CAA2BK,SAA3B,CAAqCF,IAArC,CAA0CG,IAA1C,CAA+C,IAA/C,EAAqDF,IAArD;AADS,gBAGEG,GAHF,GAIL,IAJK,CAGPC,KAHO,CAGED,GAHF;AAKTA,YAAAA,GAAG,CAACE,IAAJ;AACAF,YAAAA,GAAG,CAACG,WAAJ,GAAkB,kBAAlB;AACAH,YAAAA,GAAG,CAACI,UAAJ,GAAiB,EAAjB;AACAJ,YAAAA,GAAG,CAACK,aAAJ,GAAoB,CAApB;AACAL,YAAAA,GAAG,CAACM,aAAJ,GAAoB,EAApB;AACAN,YAAAA,GAAG,CAACO,UAAJ,GAAiB,IAAjB;AACAzB,YAAAA,KAAK,CAACY,WAAN,CAAkBD,QAAlB,CAA2BK,SAA3B,CAAqCF,IAArC,CAA0CY,KAA1C,CAAgD,IAAhD,EAAsDC,SAAtD;AACAT,YAAAA,GAAG,CAACU,OAAJ;AACD;AAdH,SADqC,CAAvC;AAkBD;;AACD,UAAMC,OAAO,GAAGvB,cAAc,CAACE,OAAf,CAAuBsB,UAAvB,CAAkC,IAAlC,CAAhB;AACA,UAAMC,gBAAgB,GAAG,IAAI/B,KAAJ,CAAU6B,OAAV,EAAmB;AAC1CG,QAAAA,IAAI,EAAE3B,MAAM,GAAG,oBAAH,GAA0B,UADI;AAE1C4B,QAAAA,OAAO,EAAE/B,oBAFiC;AAG1CgC,QAAAA,OAAO,EAAE,CAACjC,gBAAD,CAHiC;AAI1CG,QAAAA,IAAI,EAAJA;AAJ0C,OAAnB,CAAzB;AAMAG,MAAAA,gBAAgB,CAACwB,gBAAD,CAAhB;AACD;AACF,GAhCQ,EAgCN,CAACzB,cAAD,EAAiBF,IAAjB,EAAuBC,MAAvB,CAhCM,CAAT;AAkCA,sBAAO;AAAQ,IAAA,GAAG,EAAEC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAvCD;;AAyCA,eAAeH,QAAf","sourcesContent":["/* eslint-disable prefer-rest-params */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Chart } from 'chart.js';\n\nimport { centerTextPlugin } from './util';\nimport { doughnutChartOptions } from './config';\n\nconst Doughnut = ({ data, shadow = false }) => {\n  const chartContainer = useRef(null);\n  const [, setChartInstance] = useState(null);\n\n  useEffect(() => {\n    if (chartContainer && chartContainer.current) {\n      if (shadow) {\n        Chart.defaults.doughnutWithShadow = Chart.defaults.doughnut;\n        Chart.controllers.doughnutWithShadow = Chart.controllers.doughnut.extend(\n          {\n            draw(ease) {\n              Chart.controllers.doughnut.prototype.draw.call(this, ease);\n              const {\n                chart: { ctx },\n              } = this;\n              ctx.save();\n              ctx.shadowColor = 'rgba(0,0,0,0.15)';\n              ctx.shadowBlur = 10;\n              ctx.shadowOffsetX = 0;\n              ctx.shadowOffsetY = 10;\n              ctx.responsive = true;\n              Chart.controllers.doughnut.prototype.draw.apply(this, arguments);\n              ctx.restore();\n            },\n          }\n        );\n      }\n      const context = chartContainer.current.getContext('2d');\n      const newChartInstance = new Chart(context, {\n        type: shadow ? 'doughnutWithShadow' : 'doughnut',\n        options: doughnutChartOptions,\n        plugins: [centerTextPlugin],\n        data,\n      });\n      setChartInstance(newChartInstance);\n    }\n  }, [chartContainer, data, shadow]);\n\n  return <canvas ref={chartContainer} />;\n};\n\nexport default Doughnut;\n"]},"metadata":{},"sourceType":"module"}