{"ast":null,"code":"/* eslint-disable no-unused-expressions */\nimport mousetrap from 'mousetrap';\nimport { useEffect, useRef } from 'react';\n/**\n * Use mousetrap hook\n *\n * @param  {(string | string[])} handlerKey - A key, key combo or array of combos according to Mousetrap documentation.\n * @param  { function } handlerCallback - A function that is triggered on key combo catch.\n */\n\nexport default (function (handlerKey, handlerCallback) {\n  var actionRef = useRef(null);\n  actionRef.current = handlerCallback;\n  useEffect(function () {\n    mousetrap.bind(handlerKey, function (evt, combo) {\n      typeof actionRef.current === 'function' && actionRef.current(evt, combo);\n      evt.preventDefault();\n    });\n    return function () {\n      mousetrap.unbind(handlerKey);\n    };\n  }, [handlerKey]);\n});","map":{"version":3,"sources":["/home/browsewire/Desktop/hj/CEI/cei/client/src/hooks/use-mousetrap.js"],"names":["mousetrap","useEffect","useRef","handlerKey","handlerCallback","actionRef","current","bind","evt","combo","preventDefault","unbind"],"mappings":"AAAA;AACA,OAAOA,SAAP,MAAsB,WAAtB;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AAEA;;;;;;;AAMA,gBAAe,UAACC,UAAD,EAAaC,eAAb,EAAiC;AAC9C,MAAMC,SAAS,GAAGH,MAAM,CAAC,IAAD,CAAxB;AACAG,EAAAA,SAAS,CAACC,OAAV,GAAoBF,eAApB;AAEAH,EAAAA,SAAS,CAAC,YAAM;AACdD,IAAAA,SAAS,CAACO,IAAV,CAAeJ,UAAf,EAA2B,UAACK,GAAD,EAAMC,KAAN,EAAgB;AACzC,aAAOJ,SAAS,CAACC,OAAjB,KAA6B,UAA7B,IAA2CD,SAAS,CAACC,OAAV,CAAkBE,GAAlB,EAAuBC,KAAvB,CAA3C;AACAD,MAAAA,GAAG,CAACE,cAAJ;AACD,KAHD;AAIA,WAAO,YAAM;AACXV,MAAAA,SAAS,CAACW,MAAV,CAAiBR,UAAjB;AACD,KAFD;AAGD,GARQ,EAQN,CAACA,UAAD,CARM,CAAT;AASD,CAbD","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport mousetrap from 'mousetrap';\nimport { useEffect, useRef } from 'react';\n\n/**\n * Use mousetrap hook\n *\n * @param  {(string | string[])} handlerKey - A key, key combo or array of combos according to Mousetrap documentation.\n * @param  { function } handlerCallback - A function that is triggered on key combo catch.\n */\nexport default (handlerKey, handlerCallback) => {\n  const actionRef = useRef(null);\n  actionRef.current = handlerCallback;\n\n  useEffect(() => {\n    mousetrap.bind(handlerKey, (evt, combo) => {\n      typeof actionRef.current === 'function' && actionRef.current(evt, combo);\n      evt.preventDefault();\n    });\n    return () => {\n      mousetrap.unbind(handlerKey);\n    };\n  }, [handlerKey]);\n};\n"]},"metadata":{},"sourceType":"module"}