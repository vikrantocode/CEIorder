{"ast":null,"code":"module.exports = function (_) {\n  // Helpers\n  // -------\n  // Create quick reference variables for speed access to core prototypes.\n  var concat = Array.prototype.concat;\n  var ArrayProto = Array.prototype;\n  var slice = ArrayProto.slice; // Mixing in the object selectors\n  // ------------------------------\n\n  _.mixin({\n    // Returns a function that will attempt to look up a named field\n    // in any object that it's given.\n    accessor: function accessor(field) {\n      return function (obj) {\n        return obj && obj[field];\n      };\n    },\n    // Given an object, returns a function that will attempt to look up a field\n    // that it's given.\n    dictionary: function dictionary(obj) {\n      return function (field) {\n        return obj && field && obj[field];\n      };\n    },\n    // Like `_.pick` except that it takes an array of keys to pick.\n    selectKeys: function selectKeys(obj, ks) {\n      return _.pick.apply(null, concat.call([obj], ks));\n    },\n    // Returns the key/value pair for a given property in an object, undefined if not found.\n    kv: function kv(obj, key) {\n      if (_.has(obj, key)) {\n        return [key, obj[key]];\n      }\n\n      return void 0;\n    },\n    // Gets the value at any depth in a nested object based on the\n    // path described by the keys given. Keys may be given as an array\n    // or as a dot-separated string.\n    getPath: function getPath(obj, ks) {\n      if (typeof ks == \"string\") ks = ks.split(\".\"); // If we have reached an undefined property\n      // then stop executing and return undefined\n\n      if (obj === undefined) return void 0; // If the path array has no more elements, we've reached\n      // the intended property and return its value\n\n      if (ks.length === 0) return obj; // If we still have elements in the path array and the current\n      // value is null, stop executing and return undefined\n\n      if (obj === null) return void 0;\n      return getPath(obj[_.first(ks)], _.rest(ks));\n    },\n    // Returns a boolean indicating whether there is a property\n    // at the path described by the keys given\n    hasPath: function hasPath(obj, ks) {\n      if (typeof ks == \"string\") ks = ks.split(\".\");\n      var numKeys = ks.length;\n      if (obj == null && numKeys > 0) return false;\n      if (_.contains(['boolean', 'string', 'number'], typeof obj)) return false;\n      if (!(ks[0] in obj)) return false;\n      if (numKeys === 1) return true;\n      return hasPath(obj[_.first(ks)], _.rest(ks));\n    },\n    pickWhen: function pickWhen(obj, pred) {\n      var copy = {};\n\n      _.each(obj, function (value, key) {\n        if (pred(obj[key])) copy[key] = obj[key];\n      });\n\n      return copy;\n    },\n    omitWhen: function omitWhen(obj, pred) {\n      return _.pickWhen(obj, function (e) {\n        return !pred(e);\n      });\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}